.. image:: /images/Pine_Script_logo.svg
   :alt: Pine Script™ logo
   :target: https://www.tradingview.com/pine-script-docs/en/v5/Introduction.html
   :align: right
   :width: 100
   :height: 100


.. _PageLimitations:


Limitations
===========

.. contents:: :local:
    :depth: 3



Introduction
------------

As is mentioned in our :ref:`Welcome <PageWelcomeToPine>` page:

    *Because each script uses computational resources in the cloud, we must impose limits in order to share these resources fairly among our users. 
    We strive to set as few limits as possible, but will of course have to implement as many as needed for the platform to run smoothly. 
    Limitations apply to the amount of data requested from additional symbols, execution time, memory usage and script size.*

If you develop complex scripts using Pine Script™, sooner or later you will run into some of the limitations we impose.
This section provides you with an overview of the limitations that you may encounter.
There are currently no means for Pine Script™ programmers to get data on the resources consumed by their scripts.
We hope this will change in the future.

In the meantime, when you are considering large projects, it is safest to make a proof of concept 
in order to assess the probability of your script running into limitations later in your project.

Here are the limits imposed in the Pine Script™ environment. 



Time
----



Script compile time
^^^^^^^^^^^^^^^^^^^

Scripts must compile before they are executed on charts. Compilation occurs when you save a script from the editor or when you add a script to the chart.
A two-minute limit is imposed on compilation time, which will depend on the size and complexity of your script, 
and whether or not a cached version of a previous compilation is available.
When a compile exceeds the two-minute limit, a warning is issued. 
Heed that warning by shortening your script because after three consecutives warnings a one-hour ban on compilation attempts is enforced.
The first thing to consider when optimizing code is to avoid repetitions by using functions to encapsulate oft-used segments, 
and call functions instead of repeating code.



Script execution time
^^^^^^^^^^^^^^^^^^^^^

Once a script is compiled it can be executed. 
See the :ref:`Events triggering the execution of a script <PageExecutionModel_Events>` for a list of the events triggering the execution of a script.
The time alloted for the script to execute on all bars of a dataset varies with account types. The limit is 20 seconds for basic accounts, 40 for others.



Loop execution time
^^^^^^^^^^^^^^^^^^^

The execution time for any loop on any single bar is limited to 500 milliseconds. 
The outer loop of embedded loops counts as one loop, so it will time out first. 
Keep in mind that even though a loop may execute under the 500 ms time limit on a given bar, 
the time it takes to execute on all the dataset's bars may nonetheless cause your script to exceed the total execution time limit. 
For example, the limit on total execution time will make it impossible for you script to execute a 400 ms loop on each bar of a 20,000-bar dataset
because your script would then need 8,000 seconds to execute.



Chart visuals
-------------



Plot limits
^^^^^^^^^^^

A maximum of 64 plot counts is allowed per script. The functions generating plot counts are:

- `plot() <https://www.tradingview.com/pine-script-reference/v5/#fun_plot>`__
- ...(add all relevant functions in this list)
- `alertcondition() <https://www.tradingview.com/pine-script-reference/v5/#fun_alertcondition>`__

The following functions do not generate plot counts:

- `hline() <https://www.tradingview.com/pine-script-reference/v5/#fun_hline>`__
- `fill() <https://www.tradingview.com/pine-script-reference/v5/#fun_fill>`__
- `line.new() <https://www.tradingview.com/pine-script-reference/v5/#fun_line{dot}new>`__
- ...(add all relevant functions in this list)

One function call can generate from one to seven plot counts, depending on the function and how it is called. 
When your script exceeds the maximum of 64 plot counts, the runtime error message will display the plot count generated by your script. 
Once you reach that point, you can determine how many plot counts a function call generates by commenting it out in a script. 
As long as your script still throws an error, you will be able to see how the actual plot count decreases after you have commented out a line.

The following example shows different function calls and the number of plot counts each one will generate:

:: 

    //@version=5
    indicator("Plot count example")

    bool isUp = close > open
    color isUpColor = isUp ? color.green : color.red
    bool isDn = not isUp
    color isDnColor = isDn ? color.red : color.green

    // Uses one plot count.
    plot(close, color = color.white)

    // Uses two plot counts: one for the `close` series and one for the `color` series.
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Model all following comments on this ▲ one.
    plot(close, color = isUpColor)

    // uses one plot count for close series
    plotarrow(close, colorup = color.green, colordown = color.red)
    
    // uses two plot counts (1 for close series and 1 for colorup series)
    plotarrow(close, colorup = isUpColor)
    
    // uses three plot counts (1 for close series, 1 for colorup series, and 1 for colordown series)
    plotarrow(close - open, colorup = isUpColor, colordown = isDnColor)
    
    // uses four plot counts for open, high, low, and close series
    plotbar(open, high, low, close, color = color.white)
    
    // uses five plot counts for open, high, low, close, and color series
    plotbar(open, high, low, close, color = isUpColor)
    
    // uses four plot counts for open, high, low, and close series
    plotcandle(open, high, low, close, color = color.white, wickcolor = color.white, bordercolor = color.purple)
    
    // uses five plot counts for open, high, low, close, and color series
    plotcandle(open, high, low, close, color = isUpColor, wickcolor = color.white, bordercolor = color.purple)
    
    // uses six plot counts for open, high, low, close, color, and wickcolor series
    plotcandle(open, high, low, close, color = isUpColor, wickcolor = isUpColor , bordercolor = color.purple)
    
    // uses seven plot counts for open, high, low, close, color, wickcolor, and bordercolor series
    plotcandle(open, high, low, close, color = isUpColor, wickcolor = isUpColor , bordercolor = isUp ? color.lime : color.maroon)
    
    // uses one plot count for close series
    plotchar(close, color = color.white, text = "|", textcolor = color.white)
    
    // uses two plot counts for close, and color series
    plotchar(close, color = isUpColor, text = "—", textcolor = color.white)
    
    // uses three plot counts for close, color, and textcolor series
    plotchar(close, color = isUpColor, text = "O", textcolor = isUp ? color.yellow : color.white)
    
    // uses one plot count for close series
    plotshape(close, color = color.white, textcolor = color.white)
    
    // uses two plot counts for close, and color series
    plotshape(close, color = isUpColor, textcolor = color.white)
    
    // uses three plot counts for close, color, and textcolor series
    plotshape(close, color = isUpColor, textcolor = isUp ? color.yellow : color.white)
    
    // Use one plot count.
    alertcondition(close > open, "close > open", "Up bar alert")
    
    // Use one plot count.
    bgcolor(isUp ? color.yellow : color.white)

The example generates a plot count of 54. If you add three instances of the last call to 
`plotcandle() <https://www.tradingview.com/pine-script-reference/v5/#fun_plotcandle>`__ 
the script will throw an error stating the script now uses 75 plot counts, because the three additional calls to 
`plotcandle() <https://www.tradingview.com/pine-script-reference/v5/#fun_plotcandle>`__ 
each generate seven plot counts, and 54 + 21 is 75.



Line, box, and label limits
^^^^^^^^^^^^^^^^^^^^^^^^^^^


Contrary to plots which can cover the entire dataset, by default, only the last 50 lines drawn by a script are visible on charts.
The same goes for boxes and labels. You can bring the quantity of last remaining drawing objects preserved on charts up to 500 by using the 
``max_lines_count``, ``max_boxes_count`` or ``max_labels_count`` parameters in the 
`indicator() <https://www.tradingview.com/pine-script-reference/v5/#fun_indicator>`__ or
`strategy() <https://www.tradingview.com/pine-script-reference/v5/#fun_strategy>`__ declaration statements.

In this example we set the maximum quantity of last labels shown on the chart to 100:

::

    //@version=5
    indicator("Label limits example", max_labels_count = 100, overlay = true)
    label.new(bar_index, high, str.tostring(high, format.mintick))



Table limits
^^^^^^^^^^^^

A maximum of nine tables can be displayed by a script, one for each of the possible locations: 
`position.bottom_center <https://www.tradingview.com/pine-script-reference/v5/#var_position{dot}bottom_center>`__, 
`position.bottom_left <https://www.tradingview.com/pine-script-reference/v5/#var_position{dot}bottom_left>`__, 
`position.bottom_right <https://www.tradingview.com/pine-script-reference/v5/#var_position{dot}bottom_right>`__, 
`position.middle_center <https://www.tradingview.com/pine-script-reference/v5/#var_position{dot}middle_center>`__, 
`position.middle_left <https://www.tradingview.com/pine-script-reference/v5/#var_position{dot}middle_left>`__, 
`position.top_center <https://www.tradingview.com/pine-script-reference/v5/#var_position{dot}top_center>`__, 
`position.top_left <https://www.tradingview.com/pine-script-reference/v5/#var_position{dot}top_left>`__, 
or `position.top_right <https://www.tradingview.com/pine-script-reference/v5/#var_position{dot}top_right>`__. 
If you place two tables in the same position, only the most recently added table will be visible. 



\`request.*()\` calls
---------------------



Number of calls
^^^^^^^^^^^^^^^

A script cannot make more than 40 calls to functions in the `request.*` namespace. All instances of calls to these functions are counted, 
even if they are included in code blocks or functions that are never actually used in the script's logic. The functions counting towards this limit are: 
`request.security() <https://www.tradingview.com/pine-script-reference/v5/#fun_request{dot}security>`__, 
`request.security_lower_tf() <https://www.tradingview.com/pine-script-reference/v5/#fun_request{dot}security_lower_tf>`__, 
`request.quandl() <https://www.tradingview.com/pine-script-reference/v5/#fun_request{dot}quandl>`__, 
`request.financial() <https://www.tradingview.com/pine-script-reference/v5/#fun_request{dot}financial>`__, 
`request.dividends() <https://www.tradingview.com/pine-script-reference/v5/#fun_request{dot}dividends>`__, 
`request.earnings() <https://www.tradingview.com/pine-script-reference/v5/#fun_request{dot}earnings>`__ and 
`request.splits() <https://www.tradingview.com/pine-script-reference/v5/#fun_request{dot}splits>`__. 



Intrabars
^^^^^^^^^

When accessing lower timeframes, with 
`request.security() <https://www.tradingview.com/pine-script-reference/v5/#fun_request{dot}security>`__
or `request.security_lower_tf() <https://www.tradingview.com/pine-script-reference/v5/#fun_request{dot}security_lower_tf>`__, 
a maximum of 100,000 intrabars can be used in calculations. 

The quantity of chart bars covered with 100,000 intrabars will vary with the ratio of the chart's timeframe to the lower timeframe used, 
and with the average number of intrabars contained in each chart bar. 
For example, when using a 1min lower timeframe, chart bars at the 60min timeframe of an active 24x7 market will usually contain 60 intrabars each. 
Because 100,000 / 60 = 1666.67, the quantity of chart bars covered by the 100,000 intrabars will typically be 1666.
On markets where 60min chart bars do not always contain 60 1min intrabars, more chart bars will be covered.



Memory
------



Script size
^^^^^^^^^^^

Before a script is executed, it is compiled into a tokenized Intermediate Language (IL). 
Using an IL allows Pine Script™ to accommodate longer scripts by applying various optimizations before it is executed. 
The compiled form of indicators and strategies is limited to 60,000 tokens; libraries have a limit of 1 million tokens. 
There is no way to inspect the number of tokens created during compilation; you will only know your script exceeds the limit when the compiler reaches it.

Replacing code repetitions with function calls and using libraries to offload some of the workload 
are the most efficient ways to decrease the number of tokens your compiled script will generate.

The size of variable names and comments do not affect the number of compiled tokens.



Arrays and matrices
^^^^^^^^^^^^^^^^^^^

Arrays and matrices are limited to 100,000 elements.



Variables
^^^^^^^^^

A maximum of 1000 variables are allowed per scope. Pine scripts always contain one global scope, and can contain zero or more local scopes. 
Local scopes are created by indented code such as can be found in functions or 
`if <https://www.tradingview.com/pine-script-reference/v5/#op_if>`__, 
`switch <https://www.tradingview.com/pine-script-reference/v5/#op_switch>`__, 
`for <https://www.tradingview.com/pine-script-reference/v5/#op_for>`__ or 
`while <https://www.tradingview.com/pine-script-reference/v5/#op_while>`__ structures, which allow for one or more local blocks. 
Each local block counts as one local scope.

The branches of a conditional expression using a 
`?: <https://www.tradingview.com/pine-script-reference/v5/#op_{question}{colon}>`__ ternary operator do not count as local blocks.



Other limits
------------



Max bars back
^^^^^^^^^^^^^

When we create a script that depends on past data then it is vital that we make sure that there is enough previous data to be able to perform the needed calculations. 
A common error that users receive is that there isn't enough data to be able to properly execute the script and this is where ``max_bars_back`` comes in. 
For example if you are use ``close[499]`` in your script then the compiler knows that you will need at least 500 past values of 
`close <https://www.tradingview.com/pine-script-reference/v5/#var_close>`__ for each bar. 
However if you create a series integar variable called y and use this instead of the 499 then the compiler isn't able to automatically detect how much past values of 
`close <https://www.tradingview.com/pine-script-reference/v5/#var_close>`__ we will need for the script to execute. 
This is why sometimes you will see an error message telling you that Pine Script™ can't determine the length of a reference series. 
An easy solution for this common issue is to increase the ``max_bars_back`` to a number high enough so that the compiler will always have enough past references for 
any variable in the script. The max value you can set it to is 5000 and the default is 0.



Max bars forward
^^^^^^^^^^^^^^^^

Contrary to the name, this limitation doesn't work in quite the same way as the above ``max_bars_back``. This is a special case that only works with future data. 
Here is an example that shows you how to create a line that projects forward using this concept. 
We are projecting a line into the future that displays the current slope of the last two `high <https://www.tradingview.com/pine-script-reference/v5/#var_high>`__ values 
projected into the future using our ``forwardBars`` input. 
We are also drawing a line on the last bar which helps us to not only save resources but also slightly speeds up the script execution time.

::

    //@version=5
    indicator("Max bars forward example", overlay=true)

    //Functions
    drawLine(t1, t2, Y1, Y2) =>
        //init variables on last bar only
        if barstate.islast
            var line proj_line = line.new(x1 = t1, y1 = Y1, x2 = t2, y2 = Y2, xloc = xloc.bar_index, extend = extend.none, color = color.silver, style = line.style_dashed)
            line.set_xy1(proj_line, t1, Y1)
            line.set_xy2(proj_line, t2, Y2)
        
    //Declare Input Variables
    forwardBars = input.int(defval = 10, title = "Forward Bars to Display", minval = 0, step = 1, maxval = 499) + 1

    //Main logic
    float signal = high
    float m = (signal[1] - signal[2]) / (bar_index[1] - bar_index[2])
    float b = signal[2]
    int t2 = bar_index[2] + forwardBars

    drawLine(bar_index[2], t2, b, m * forwardBars + b)



Local blocks
^^^^^^^^^^^^

As we discussed in the variables section, each script will have a local scope and a global scope. 
The local block is another way to describe a local scope so in other words, if statements, loops, etc. 
There is a max of 500 local blocks allowed which is one of those limits that will be very difficult to surpass. 

::

    //@version=5
    indicator("Local block example")
    int length = 14
    var volMa = float(na)
    if close > open
        volMa := ta.wma(volume, length)
    
    // we can simplify the above by removing the local block and using a ternary instead
    var volMaAlt = float(na)
    volMaAlt := close > open ? ta.wma(volume, length) : nz(volMaAlt[1])

    plot(volMa)
    plot(volMaAlt)

.. note:: We are calculating the volume wma only when the close is higher than the open to save on processing time



Backtesting
^^^^^^^^^^^

This particular limitation only applies to strategy scripts and in most cases you probably won't see the error message associated with this limit. 
You have a max of 9,000 orders that can be placed when you run a backtesting script. 
There is a new user feature that was recently launched for Premium users only called Deep Backtesting. 
If you use this new feature, this will increase your max limit from 9,000 orders to 200,000 orders.



Historical bars
^^^^^^^^^^^^^^^

As discussed in more detail on our historical references page, the historical operator will give you the value from X bars ago. 
So for our example above in the array size section, ``close[2]`` will give you the `close <https://www.tradingview.com/pine-script-reference/v5/#var_close>`__ price 2 bars ago. 
There is a limit for historical bars based on your account status. I will put the full breakdown of the limits per account type below. 

These are the account-specific bar limits:
 - 20000 historical bars for the Premium plan.
 - 10000 historical bars for Pro and Pro+ plans.
 - 5000 historical bars for other plans.

This means that if you have a Free plan for your account then you are limited to 5000 historical bars so if you try ``close[5001]`` then you will receive an historical bar error.



.. image:: /images/TradingView-Logo-Block.svg
    :width: 200px
    :align: center
    :target: https://www.tradingview.com/
